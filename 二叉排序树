#include<stdio.h>
#include<malloc.h>

typedef int KeyType;

typedef struct node
{
	KeyType key;
	struct node *lchild,*rchild;
}BSTNode;
typedef BSTNode *BSTree;

void InsertBST(BSTree *TPtr,KeyType key)
{
	BSTNode *f,*p=(*TPtr);
	while(p)
	{
		if(p->key==key)
			return;
		f=p;
		p=(key<p->key)?p->lchild:p->rchild;
	}
	p=(BSTNode*)malloc(sizeof(BSTNode));
	p->key=key;p->lchild=p->rchild=NULL;
	if((*TPtr)==NULL)
		(*TPtr)=p;
	else
	{
		if(key<f->key)
			f->lchild=p;
		else
			f->rchild=p;
	}
}

BSTree CreateBST(void)
{
	BSTree T=NULL;
	KeyType key;
	scanf("%d",&key);
	while(key)
	{
		InsertBST(&T,key);
		scanf("%d",&key);
	}
	return T;
}

BSTNode *SearchBST(BSTree T,KeyType key,int *i)
{
	(*i)++;
	if(T==NULL||key==T->key)
		return T;
	if(key<T->key)
		return SearchBST(T->lchild,key,i);
	else
		return SearchBST(T->rchild,key,i);	
}

int main()
{
	BSTree *T;
	KeyType key;
	int ii=0,*i;
	i=&ii;
	printf("请输入关键字:");
	T=CreateBST();
	printf("请输入要查找的key:");
	scanf("%d",&key);
	T=SearchBST(T,key,i);
	if(T!=NULL)
		printf("找到了%d\n查找次数:%d\n",key,*i);
	else
		printf("没找到\n");
	return 0;
}
