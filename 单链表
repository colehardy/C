#include "stdio.h"                           /*单链表方式的实现*/

#include "malloc.h"
typedef char ElemType;
typedef struct LNode                         /*定义链表节点类型*/
{
	ElemType data;
	struct LNode *next;
}LNode,*LinkList;
/*在带头结点的单链表中第i个位置(从1开始)插入元素*/
int ListInsert_L(LinkList head,int i,ElemType e)
{
	LinkList p=head;
	LinkList s;
	int j;
	for (j=1;j<i;j++)
	{
		if (p)
			p=p->next;
		else
			break;
	}
	if (!p||i<1)
	{
		printf("error!!请输入正确的i值!!\n");
		return 0;
	}
	s=(LinkList)malloc(sizeof(LNode));
	s->data=e;
	s->next=p->next;                          /*在当前结点p之后插入结点s*/
	p->next=s;
	return 1;
} 

/*建立链表，输入元素，用头插法建立带头结点的单链表(逆序),输入0结束*/
LinkList CreateList_L(LinkList head)
{
	ElemType temp;
	LinkList p;
	printf("请输入结点值(输入0结束):");
	fflush(stdin);                            /*清除键盘缓冲区*/
	scanf("%c",&temp);
	while (temp!='0')
	{
		if(('A'<=temp&&temp<='Z')||('a'<=temp&&temp<='z'))
		{
			p=(LinkList)malloc(sizeof(LNode));/*生成新的结点*/
			p->data=temp;
			p->next=head->next;
			head->next=p;                     /*在链表头部插入结点,即头插法*/
		}
		printf("请输入结点值(输入0结束):");
		fflush(stdin);                        /*清除键盘缓冲区*/
		scanf("%c",&temp);
	}
	return head;
}

/*在带头结点的单链表中删除第i个位置(从1开始)的元素*/
int ListDel_L(LinkList head,int i)
{
	LinkList p,tmp;
	int j;
	p=head->next;
	tmp=head;
	for (j=1;j<i;j++)
	{
		if(p)
		{
			p=p->next;                         /*p指向当前结点*/
			tmp=tmp->next;                     /*tmp指向当前结点的前趋*/
		}
		else
			break;
	}
	if (!p||i<1)
	{
		printf("error!!请输入正确的i值!!\n");
		return 0;
	}
	tmp->next=p->next;                         /*删除结点*/
	free(p);
	return 1;
}

/*顺序输出链表的内容*/
void ListPint_L(LinkList head)
{
	LinkList p;
	int i=0;
	p=head->next;                              /*p指向第1个结点*/
	while(p!=NULL)
	{
		i++;
		printf("第%d个元素是:",i);
		printf("%c\n",p->data);
		p=p->next;
	}
}

/*对链表冒泡排序*/
LinkList O(LinkList head)
{	
	LinkList n,p,q,temp;
	int flag=1;
	if (head==NULL||head->next==NULL)          /*空链表或单结点链表*/
		return head;
	if(head->next->next==NULL)                 /*双结点链表*/
	{
		if (head->data>head->next->data)
		{
			head->next->next=head;
			head=head->next;
			head->next->next=NULL;
		}
		return head;
	}
	n=head;
	p=n->next;
	q=p->next;
	
	while (flag)                               /*三结点及以上链表*/
	{
		n=head;
		p=n->next;
		q=p->next;
		if (n->data>p->data)
		{
			head=p;
			p->next=n;
			n->next=q;
			temp=p;
			p=n;
			n=temp;
		}
		flag=0;
		while (q!=NULL)
		{
			if (p->data>q->data)
			{
				n->next=q;
				p->next=q->next;
				q->next=p;
				temp=p;
				p=q;
				q=temp;
				flag=1;
			}
			n=p;
			p=q;
			q=q->next;
		}
	}
	return head;
}

void main()
{
	int i;
	char cmd,e;
	LinkList head;
	head=(LinkList)malloc(sizeof(LNode));           /*头结点*/
	head->next=NULL;
	CreateList_L(head);
	ListPint_L(head);
	do
	{
		printf("i,I...插入\n");
		printf("d,D...删除\n");
		printf("o,O...排序\n");
		printf("q,Q...退出\n");
		do
		{
			fflush(stdin);          /*清除键盘缓冲区*/
			scanf("%c",&cmd);
		}while((cmd!='d')&&(cmd!='D')&&(cmd!='q')&&(cmd!='Q')&&(cmd!='i')&&(cmd!='I')&&(cmd!='o')&&(cmd!='O'));
		switch (cmd)
		{
		case 'i':
		case 'I':
			printf("请输入你要插入的数据:");
			fflush(stdin);          /*清除键盘缓冲区*/
			scanf("%c",&e);
			printf("请输入你要插入的位置:");
			scanf("%d",&i);
			ListInsert_L(head,i,e);
			ListPint_L(head);
			break;
		case 'd':
		case 'D':
			printf("请输入你要删除元素的位置:");
			fflush(stdin);          /*清除键盘缓冲区*/
			scanf("%d",&i);
  			ListDel_L(head,i);
			ListPint_L(head);
			break;
		case 'o':
		case 'O':
			printf("排序后的链表:\n");
			fflush(stdin);          /*清除键盘缓冲区*/
			O(head);
			ListPint_L(head);
			break;
		}
	}while((cmd!='q')&&(cmd!='Q'));
}
