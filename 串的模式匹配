#include<stdio.h>

#define MaxStrSize 256

typedef struct
{
	char ch[MaxStrSize];
	int length;
}SeqString;

int Index(SeqString s,SeqString t,int *n);
void get_next(SeqString t,int next[]);
int Index_kmp(SeqString s,SeqString t,int next[],int *n);
SeqString CreateStr(SeqString s);

int main()
{
	int next[MaxStrSize]={0};
	int i,j,n1=0,*n=&n1;
	SeqString s,t;
	printf("请输入目标串s:");
	s=CreateStr(s);
	printf("输入的s:%s\n",s.ch);
	printf("请输入模式串t:");
	t=CreateStr(t);
	printf("输入的t:%s\n",t.ch);
	//基本的模式匹配算法
	i=Index(s,t,n);
	printf("基本的模式匹配算法结果:%d\n",i);
	printf("比较次数:%d\n",*n);
	//KMP算法
	get_next(t,next);
	j=Index_kmp(s,t,next,n);
	printf("KMP算法结果:%d\n",j);
	printf("比较次数:%d\n",*n);
	return 0;
}

//基本的模式匹配算法
int Index(SeqString s,SeqString t,int *n)
/*在目标串s中找模式串t首次出现的位置。若不存在返回0*/
{
	int i,j;
	*n=0;
	for (i=1,j=1;i<=s.length && j<=t.length;)
	{
		if (s.ch[i-1]==t.ch[j-1])
		{
			i++;
			j++;
		}
		else
		{
			i=i-j+2;
			j=1;
		}
		/*字符比较不成功，i指针回溯，并从t的第1个字符起重新比较*/
		*n=(*n)+1;
	}
	if (j>t.length)
		return (i-t.length);/*匹配成功*/
	else
		return (0);/*匹配不成功*/
}

//KMP算法
void get_next(SeqString t,int next[])
/*计算模式串t的next函数值，存入数组next中*/
{
	int i=1,j=0;
	next[1]=0;
	while (i<t.length)
	{
		if (j==0 || t.ch[i-1]==t.ch[j-1])/*匹配成功，继续比较后续字符*/
		{
			++i;
			++j;
			next[i]=j;
		}
		else
			j=next[j];
	}
}

int Index_kmp(SeqString s,SeqString t,int next[],int *n)
/*在目标串s中找模式串t首次出现的位置。若不存在返回0*/
{
	int i=1,j=1;
	*n=0;
	while (i<=s.length && j<=t.length)
	{
		if (j==0 || s.ch[i-1]==t.ch[j-1])/*继续比较后续字符*/
		{
			++i;
			++j;
		}
		else
			j=next[j];/*模式串后移，重新比较*/
		*n=(*n)+1;
	}
	if (j>t.length)
		return (i-t.length);/*匹配成功*/
	else
		return 0;/*匹配不成功*/
}

SeqString CreateStr(SeqString s)
{
	char ch;
	s.length=0;
	while ((ch=getchar())!='\n')
	{
		s.ch[s.length]=ch;
		s.length++;
	}
	s.ch[s.length]='\0';
	return s;
}
